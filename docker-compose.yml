services:
  # React Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend-container 
    restart: unless-stopped
    networks:
      - weather-net

  # Weather API Service (Node.js example)
  weather-api:
    build:
      context: ./weather-api
      dockerfile: Dockerfile
    container_name: weather-api-container 
    restart: unless-stopped
    environment:
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY} 
      - DATABASE_URL=postgresql://user:password@postgres-db:5432/weatherdb
    depends_on:
      - postgres-db
    networks:
      - weather-net
    # expose: # No need to expose ports to host, Nginx will handle it
    #   - "3000"

  # Historical Data Service (Python)
  historical-data:
    build:
      context: ./historical-data
      dockerfile: Dockerfile 
    container_name: historical-data-container 
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://user:password@postgres-db:5432/weatherdb
    depends_on:
      - postgres-db
    networks:
      - weather-net
    # expose:
    #   - "5000"

  # PostgreSQL Database Service
  postgres-db:
    image: postgres:14-alpine
    container_name: postgres-container 
    restart: unless-stopped
    environment:
      POSTGRES_USER: user 
      POSTGRES_PASSWORD: password 
      POSTGRES_DB: weatherdb 
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-db/init/init.sql:/docker-entrypoint-initdb.d/init.sql # This script is to initialize the database
    networks:
      - weather-net
    ports: # Optionally expose for direct access during development, not needed for app
      - "5432:5432"

  # Nginx Reverse Proxy Service
  nginx-proxy:
    build:
      context: ./nginx
      dockerfile: Dockerfile 
    container_name: nginx-proxy-container 
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes: 
      - ./nginx/certs:/etc/nginx/certs # Mount SSL certificates
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro # Mount custom Nginx config
    networks:
      - weather-net
    depends_on:
      - frontend
      - weather-api
      - historical-data

# Networks
networks:
  weather-net:
    driver: bridge

# Volumes
volumes:
  postgres-data:
    driver: local
